package com.lojaunit.Lojaunit.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lojaunit.Lojaunit.model.Fornecedor;
import com.lojaunit.Lojaunit.repository.FornecedorRepository;

@Controller
@RequestMapping(path = "/fornecedor")
public class FornecedorController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data

	private FornecedorRepository fornecedoRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewFornecedor(@RequestParam String nome, @RequestParam String endereco , @RequestParam String telefone,
			@RequestParam Integer cnpj, @RequestParam String email) {

		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Fornecedor forn = new Fornecedor();
		forn.setNome(nome);
		forn.setEndereco(endereco);
		forn.setTelefone(telefone);
		forn.setCnpj(cnpj);
		forn.setEmail(email);
		

		fornecedoRepository.save(forn);
		return "Fornecedor salvo com sucesso!";
	}

	@PutMapping(path = "/alterar/{id}")
	public @ResponseBody String alterarFornecedor(@RequestParam String nome, @RequestParam String endereco, @RequestParam String telefone,
			@RequestParam Integer cnpj, @RequestParam String email, @PathVariable("id") Integer id) {

		if (fornecedoRepository.existsById(id)) {
			Fornecedor forn = new Fornecedor();
			forn.setId(id);
			forn.setNome(nome);
			forn.setEndereco(endereco);
			forn.setTelefone(telefone);
			forn.setCnpj(cnpj);
			forn.setEmail(email);
			fornecedoRepository.save(forn);
			return "Fornecedor atualizado com Sucesso!";
		}
		return "Fornecedor não encontrado!";
	}

	@GetMapping(path = "/consultar")
	public @ResponseBody Optional<Fornecedor> consultarFornecedor(@RequestParam Integer id) {

		if (fornecedoRepository.existsById(id)) {
			return fornecedoRepository.findById(id);
		}
		return null;
	}

	@DeleteMapping(path = "/remover")
	public @ResponseBody String deletarFornecedor(@RequestParam Integer id) {

		if (fornecedoRepository.existsById(id)) {
			fornecedoRepository.deleteById(id);
			return "Fornecedor removido!";
		}
		return "Fornecedor não encontrado para exclusão!";
	}

	@GetMapping(path = "/listar")
	public @ResponseBody Iterable<Fornecedor> getAllFornecedor() {
		return fornecedoRepository.findAll();
	}

}
