package com.lojaunit.Lojaunit.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lojaunit.Lojaunit.model.FormaDePagamento;
import com.lojaunit.Lojaunit.repository.FormaDePagamentoRepository;

@Controller
@RequestMapping(path = "/forma_de_pagamento") 
public class FormaDePagamentoController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data

	private FormaDePagamentoRepository formaDePagamentoRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewFormaDePagamento(@RequestParam String forma, @RequestParam String descricao, @RequestParam boolean ativo) {

		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		FormaDePagamento fdpg = new FormaDePagamento();
		fdpg.setForma(forma);
		fdpg.setDescricao(descricao);
		fdpg.setAtivo(ativo);

		formaDePagamentoRepository.save(fdpg);
		return "Forma de Pagamento salva com sucesso!!!";
	}


	@PutMapping(path = "/alterar/{id}")	
	public @ResponseBody String alterarFormaDePagamento(@RequestParam String forma, @RequestParam String descricao, @RequestParam boolean ativo,
												@PathVariable("id") Integer id) {

		if (formaDePagamentoRepository.existsById(id)) {	
			FormaDePagamento fdpg = new FormaDePagamento();			
			fdpg.setId(id);
			fdpg.setForma(forma);
			fdpg.setDescricao(descricao);
			fdpg.setAtivo(ativo);		
			
			formaDePagamentoRepository.save(fdpg);		
			return "Forma de Pagamento atualizada com Sucesso!";
			}
		return "Forma de Pagamento não encontrada!";
	}

	
	@GetMapping(path = "/consultar")
	public @ResponseBody Optional<FormaDePagamento> consultarFormaDePagamento(@RequestParam Integer id){

			return formaDePagamentoRepository.findById(id);
	}
	
	@DeleteMapping(path = "/remover")
	public @ResponseBody String deletarFormaDePagamento(@RequestParam Integer id) {
	
		if (formaDePagamentoRepository.existsById(id)) {
			formaDePagamentoRepository.deleteById(id);
		return "Forma de Pagamento removido!";
		}
		return "Forma de Pagamento não encontrada para exclusão!";
	}

	@GetMapping(path = "/listar")
	public @ResponseBody Iterable<FormaDePagamento> getAllFormaDePagamento() {
		return formaDePagamentoRepository.findAll();
	}

}