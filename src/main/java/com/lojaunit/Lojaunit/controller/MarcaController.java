package com.lojaunit.Lojaunit.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lojaunit.Lojaunit.model.Marca;
import com.lojaunit.Lojaunit.repository.MarcaRepository;

@Controller
@RequestMapping(path = "/marca") 
public class MarcaController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data

	private MarcaRepository marcaRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewMarca(@RequestParam String nome, @RequestParam String descricao) {

		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Marca marca = new Marca();
		marca.setNome(nome);
		marca.setDescricao(descricao);

		marcaRepository.save(marca);
		return "Marca salva com sucesso!!!";
	}


	@PutMapping(path = "/alterar/{id}")	
	public @ResponseBody String alterarMarca(@RequestParam String nome, @RequestParam String descricao,
												@PathVariable("id") Integer id) {

		if (marcaRepository.existsById(id)) {	
			Marca marca = new Marca();			
			marca.setId(id);
			marca.setNome(nome);
			marca.setDescricao(descricao);		
			
			marcaRepository.save(marca);		
			return "Marca atualizada com Sucesso!";
			}
		return "Marca não encontrada!";
	}

	
	@GetMapping(path = "/consultar")
	public @ResponseBody Optional<Marca> consultarMarca(@RequestParam Integer id){

			return marcaRepository.findById(id);
	}
	
	@DeleteMapping(path = "/remover")
	public @ResponseBody String deletarMarca(@RequestParam Integer id) {
	
		if (marcaRepository.existsById(id)) {
			marcaRepository.deleteById(id);
		return "Marca removida!";
		}
		return "Marca não encontrada para exclusão!";
	}

	@GetMapping(path = "/listar")
	public @ResponseBody Iterable<Marca> getAllMarca() {
		return marcaRepository.findAll();
	}

}